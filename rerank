#!/usr/bin/env python
import optparse
import sys
import math
from collections import namedtuple

# Modified code to incorporate bigram feature while being classified

optparser = optparse.OptionParser()
optparser.add_option("-n", "--nbest", dest="nbest", default="data/test.nbest.shuffled", help="N-best file")
optparser.add_option("-w", "--weight-file", dest="weights", default=None, help="Weight filename, or - for stdin (default=use uniform weights)")
(opts, _) = optparser.parse_args()

w = None
if opts.weights is not None:
  weights_file = sys.stdin if opts.weights is "-" else open(opts.weights)
  w = [float(line.strip()) for line in weights_file]

translation = namedtuple("translation", "english, score")
nbests = []

ngrams = {}
num = {}

for n, line in enumerate(open(opts.nbest)):
  (l, sentence, _) = line.strip().split("|||")
  l = int(l)

  sen = [x.lower() for x in sentence.split()]
  for i in range(len(sen) - 1):        
    if (l, (sen[i], sen[i+1])) not in ngrams:
      ngrams[(l, (sen[i], sen[i+1]))] = 0
    ngrams[(l, (sen[i], sen[i+1]))] += 1
  
  if l not in num:
    num[l] = 0
  num[l] += 1


for line in open(opts.nbest):
  (i, sentence, features) = line.strip().split("|||")
  i = int(i)
  if len(nbests) <= int(i):
    nbests.append([])
  features = [float(h) for h in features.strip().split()]
  
  sen = [x.lower() for x in sentence.split()]
  prob = 0.0
  for j in range(len(sen) - 1):
    prob += math.log(float(ngrams[(i, (sen[j], sen[j+1]))])/num[i])
  
  features += [prob]

  if w is None:
    w = [1.0/len(features) for _ in xrange(len(features))]
  nbests[int(i)].append(translation(sentence.strip(), sum([x*y for x,y in zip(w, features)])))

for nbest in nbests:
  print sorted(nbest, key=lambda x: -x.score)[0].english
